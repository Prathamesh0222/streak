generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String?
  email            String            @unique
  password         String
  image            String?
  level            Int               @default(1)
  xp               Int               @default(0)
  totalXp          Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Habit            Habit[]
  UserAchievements UserAchievement[]
}

model Habit {
  id          String        @id @default(uuid())
  title       String
  description String?
  category    String?
  status      StatusType    @default(PENDING)
  priority    PriorityType  @default(MEDIUM)
  frequency   FrequencyType @default(DAILY)
  goalTarget  Int?          @default(7)
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  HabitLogs   HabitLogs[]
}

model HabitLogs {
  id          String   @id @default(uuid())
  date        DateTime
  isCompleted Boolean  @default(false)
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId     String
  createdAt   DateTime @default(now())

  @@index([habitId, date])
}

model Achievement {
  id               String              @id @default(uuid())
  name             String              @unique
  description      String
  icon             String?
  xpReward         Int                 @default(0)
  category         AchievementCategory @default(STREAK)
  requirement      Int
  isActive         Boolean             @default(true)
  createdAt        DateTime            @default(now())
  UserAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  isCompleted   Boolean     @default(false)

  @@unique([userId, achievementId])
  @@index([userId])
}

enum StatusType {
  COMPLETED
  PENDING
  ONGOING
}

enum PriorityType {
  HIGH
  MEDIUM
  LOW
}

enum FrequencyType {
  DAILY
  WEEKLY
  MONTHLY
}

enum AchievementCategory {
  STREAK
  HABITS
  CONSISTENCY
}
